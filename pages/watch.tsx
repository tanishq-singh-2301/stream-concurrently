import Head from 'next/head';
import type { NextPage } from 'next';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import ReactPlayer from 'react-player';
import * as Icons from 'react-bootstrap-icons';

interface videoState {
    isPlaying: boolean;
    isMute: boolean;
    loaded: number;
    jump: number;
    played: number;
};

const Watch: NextPage = () => {
    const [send, setSend] = useState<{ send: (options: { action: 'join' | 'jump' | 'play' | 'pause'; message: string }) => void } | boolean>(false);
    const [video, setVideo] = useState<videoState>({
        isPlaying: false,
        isMute: false,
        loaded: 0,
        jump: 0,
        played: 0
    });
    const [connection, setConnection] = useState(false);
    const [player, setPlayer] = useState<any>(null);
    const router = useRouter();

    useEffect(() => {
        const ws_ = new WebSocket(process.env.NEXT_PUBLIC_WS_ENDPOINT);
        ws_.onopen = () => {
            setSend({ send: (options) => ws_.send(JSON.stringify(options)) });
            // ws_.send(
            //     JSON.stringify({
            //         uuid: router.query.uuid,
            //         link: router.query.link,
            //         action: 'join'
            //     })
            // );
        };

        ws_.onmessage = message => {
            console.log({ message });
        };

        console.log(router.query);

    }, []);

    if (typeof send === "object") {

    };

    return (
        <section>
            <Head>
                <title>Stream Concurrently</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            {
                connection ?
                    <main>
                        {
                            video.isPlaying ?
                                <Icons.Play onClick={() => setVideo({ ...video, isPlaying: false })} /> :
                                <Icons.Stop onClick={() => setVideo({ ...video, isPlaying: true })} />
                        }
                        {
                            video.isMute ?
                                <Icons.VolumeMute onClick={() => setVideo({ ...video, isMute: false })} /> :
                                <Icons.VolumeDown onClick={() => setVideo({ ...video, isMute: true })} />
                        }
                        <input
                            type='range' min={0} max={1} step='any'
                            value={video.played}
                            onChange={e => player.seekTo(e.target.value)}
                        />
                        <input
                            type='range' min={0} max={1} step='any'
                            value={video.loaded}
                        />
                        <ReactPlayer
                            url={router.query.link}
                            muted={video.isMute}
                            playing={video.isPlaying}
                            onProgress={e => setVideo({ ...video, played: e.played, loaded: e.loaded })}
                            onEnded={() => setPlayer({ ...video, player: 1, loaded: 1 })}
                            ref={ref => setPlayer(ref)}
                        />
                    </main> : <h1>CONNECTING...</h1>
            }
        </section>
    );
};

export default Watch;