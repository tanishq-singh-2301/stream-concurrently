import Head from 'next/head';
import type { NextPage } from 'next';
import { useEffect, useState, useContext, useRef } from 'react';
import { useRouter } from 'next/router';
import ReactPlayer from 'react-player';
import crypto from 'crypto';
import { WsContext } from '../context/websocket';
import * as Icons from 'react-bootstrap-icons';
import Spinner from '../components/Spinner';

const decrypt = (text: string) => {
    let textParts = text.split(':');
    let iv = Buffer.from(textParts.shift(), 'hex');
    let encryptedText = Buffer.from(textParts.join(':'), 'hex');
    let decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(process.env.NEXT_PUBLIC_ENCRYPTION_KEY as string), iv);
    let decrypted = decipher.update(encryptedText);

    decrypted = Buffer.concat([decrypted, decipher.final()]);

    return decrypted.toString();
}

interface videoState {
    isMute: boolean;
    loaded: number;
    jump: number;
    played: number;
};

interface dataInterface {
    videoLink: string;
    roomId: string;
    userName: string;
    names: string[];
};

const Watch: NextPage = () => {
    const [video, setVideo] = useState<videoState>({
        isMute: false,
        loaded: 0,
        jump: 0,
        played: 0
    });
    const [isPlaying, setPlaying] = useState<boolean>(false);
    const ref = useRef(null);
    const router = useRouter();
    const [data, setData] = useState<dataInterface>({ roomId: null, userName: null, videoLink: null, names: null });
    const { ws } = useContext(WsContext);

    const sendMessage = (message: string) => {
        if (typeof window !== "undefined") {
            try {
                ws.send(message)
            } catch {
                window.location.replace(window.location.origin);
            }
        };
    };

    if (typeof window !== "undefined") {
        try {
            ws.onopen = () => console.log('connected')
        } catch {
            window.location.replace(window.location.origin);
        }
    }

    useEffect(() => {
        const queryData = JSON.parse(decrypt(router.query.q.toString()));

        if (router.query.q === undefined) router.replace('/');
        else setData(queryData);

        ws.onmessage = message => {
            if (message.data) {
                const res = JSON.parse(message.data);

                switch (res.action) {
                    case "isPlaying":
                        setPlaying(res.isPlaying);
                        break;

                    case "jump":
                        ref.current.seekTo(res['time-frame']);
                        setPlaying(true);
                        break;

                    case "usersConnected":
                        setData({ ...queryData, names: res.names });
                        break;

                    default:
                        break;
                }
            }
        };
    }, []);

    return (
        <section>
            <Head>
                <title>Stream Concurrently</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            {
                data.roomId !== null ?
                    <main>
                        {
                            isPlaying ?
                                <Icons.Play className='text-slate-50 text-2xl font-bold' onClick={
                                    () => {
                                        sendMessage(JSON.stringify({
                                            "action": "isPlaying",
                                            "isPlaying": false,
                                            "room-id": data.roomId
                                        }))
                                    }
                                } /> :
                                <Icons.Stop className='text-slate-50 text-2xl font-bold' onClick={
                                    () => {
                                        sendMessage(JSON.stringify({
                                            "action": "isPlaying",
                                            "isPlaying": true,
                                            "room-id": data.roomId
                                        }))
                                    }
                                } />
                        }
                        {
                            video.isMute ?
                                <Icons.VolumeMute className='text-slate-50 text-2xl font-bold' onClick={() => setVideo({ ...video, isMute: false })} /> :
                                <Icons.VolumeDown className='text-slate-50 text-2xl font-bold' onClick={() => setVideo({ ...video, isMute: true })} />
                        }
                        <input
                            type='range' min={0} max={1} step='any'
                            value={video.played}
                            onChange={e => {
                                sendMessage(JSON.stringify({
                                    "action": "jump",
                                    "room-id": data.roomId,
                                    "time-frame": e.target.value
                                }))
                            }}
                        />
                        <input
                            type='range' min={0} max={1} step='any'
                            value={video.loaded}
                        />
                        <h1 className='text-slate-50 text-2xl font-bold'>ROOM ID: {data.roomId}</h1>
                        <ReactPlayer
                            url={data.videoLink}
                            muted={video.isMute}
                            playing={isPlaying}
                            onProgress={e => setVideo({ ...video, played: e.played, loaded: e.loaded })}
                            onEnded={() => setVideo({ ...video, played: 1, loaded: 1 })}
                            ref={ref}

                        />
                        {
                            data.names ? data.names.map((name, index) => <h1 key={index} className='text-slate-50 text-2xl font-bold'>{name}</h1>) : null
                        }
                    </main> : <Spinner />
            }
        </section>
    );
};

export default Watch;